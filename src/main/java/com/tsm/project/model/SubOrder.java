/*
 * Created on 5 Apr 2016 ( Time 21:36:15 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.tsm.project.model;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;


import javax.persistence.*;

/**
 * Persistent class for entity stored in table "sub_order"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="sub_order", schema="main" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="SubOrder.countAll", query="SELECT COUNT(x) FROM SubOrder x" )
} )
public class SubOrder implements Serializable
{
    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="sub_quantity")
    private Integer     subQuantity  ;

    @Column(name="sub_total")
    private Integer    subTotal     ;

	// "prodId" (column "prod_id") is not defined by itself because used as FK in a link 
	// "orderId" (column "order_id") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="order_id", referencedColumnName="id")
    private Order order       ;

    @ManyToOne
    @JoinColumn(name="prod_id", referencedColumnName="id")
    private Product product     ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public SubOrder()
    {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id )
    {
        this.id = id ;
    }
    public Integer getId()
    {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : sub_quantity ( inet ) 
    public void setSubQuantity( Integer subQuantity )
    {
        this.subQuantity = subQuantity;
    }
    public Integer getSubQuantity()
    {
        return this.subQuantity;
    }

    //--- DATABASE MAPPING : sub_total ( int4 ) 
    public void setSubTotal( Integer subTotal )
    {
        this.subTotal = subTotal;
    }
    public Integer getSubTotal()
    {
        return this.subTotal;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setOrder( Order order )
    {
        this.order = order;
    }
    public Order getOrder()
    {
        return this.order;
    }

    public void setProduct( Product product )
    {
        this.product = product;
    }
    public Product getProduct()
    {
        return this.product;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(subQuantity);
        sb.append("|");
        sb.append(subTotal);
        return sb.toString(); 
    } 

}